name: "Build Hyprland x86_64 Glibc"

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REPO_OWNER: "${{ github.repository_owner }}"
  REPO_NAME: "${{ github.event.repository.name }}"
  RESULT_NAME: "x86_64-glibc"
  TARGET_ARCH: "x86_64"
  BUILD_ARGS: ""

jobs:
  build:
    name: Build Hyprland
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/void-linux/void-${{ matrix.config.libc }}-full:20250227R1
      options: --platform ${{ matrix.config.platform }} --privileged
      env:
        ARCH: "${{ matrix.config.arch }}"
        BOOTSTRAP: "${{ matrix.config.host }}"
        TEST: "${{ matrix.config.test }}"

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              arch: x86_64,
              host: x86_64,
              libc: glibc,
              platform: linux/amd64,
              test: 1,
            }

    steps:
      - name: Export environment variables
        run: |
          echo "REPO_OWNER=${{ env.REPO_OWNER }}" >> "$GITHUB_ENV"
          echo "REPO_NAME=${{ env.REPO_NAME }}" >> "$GITHUB_ENV"
          echo "RESULT_NAME=${{ env.RESULT_NAME }}" >> "$GITHUB_ENV"
          echo "BUILD_ARGS=${{ env.BUILD_ARGS }}" >> "$GITHUB_ENV"
          echo "SCRIPT_DIR=/work/${{ env.REPO_NAME }}/scripts" >> "$GITHUB_ENV"
          echo "XBPS_PASSPHRASE=${{ secrets.PRIVATE_PEM_PASSPHRASE }}" >> "$GITHUB_ENV"
          echo "PEM_PAT_TOKEN=${{ secrets.PEM_PAT }}" >> "$GITHUB_ENV"
          echo "ACCESS_GIT_TOKEN=${{ secrets.ACCESS_GIT }}" >> "$GITHUB_ENV"

      - name: Prepare container and create a non-root user
        run: |
          mkdir -p /etc/xbps.d && cp /usr/share/xbps.d/*-repository-*.conf /etc/xbps.d/
          sed -i 's|repo-default|repo-ci|g' /etc/xbps.d/*-repository-*.conf
          xbps-install -Syu xbps && xbps-install -yu && xbps-install -y sudo bash grep curl git
          useradd -G xbuilder -M builder

      - name: Clone hyprland-void repo
        run: |
          mkdir /work && cd /work
          git clone https://github.com/$REPO_OWNER/$REPO_NAME.git

      - name: Prepare
        run: $SCRIPT_DIR/clone-and-prepare

      # Build deps packages  

      - name: Build libtoml++
        run: PACKAGE=libtoml++ $SCRIPT_DIR/build-package

      - name: Build libspng
        run: PACKAGE=libspng $SCRIPT_DIR/build-package

      - name: Build sdbus-cpp
        run: PACKAGE=sdbus-cpp $SCRIPT_DIR/build-package

      # All declared individually for logging purposes

      - name: Build hyprutils
        run: PACKAGE=hyprutils $SCRIPT_DIR/build-package

      - name: Build hyprlang
        run: PACKAGE=hyprlang $SCRIPT_DIR/build-package

      - name: Build hyprcursor
        run: PACKAGE=hyprcursor $SCRIPT_DIR/build-package

      - name: Build hyprgraphics
        run: PACKAGE=hyprgraphics $SCRIPT_DIR/build-package

      - name: Build hyprwayland-scanner
        run: PACKAGE=hyprwayland-scanner $SCRIPT_DIR/build-package

      - name: Build aquamarine
        run: PACKAGE=aquamarine $SCRIPT_DIR/build-package

      - name: Build hyprland-protocols
        run: PACKAGE=hyprland-protocols $SCRIPT_DIR/build-package

      - name: Build xdg-desktop-portal-hyprland
        run: PACKAGE=xdg-desktop-portal-hyprland $SCRIPT_DIR/build-package

      - name: Build hypridle
        run: PACKAGE=hypridle $SCRIPT_DIR/build-package

      - name: Build hyprlock
        run: PACKAGE=hyprlock $SCRIPT_DIR/build-package

      - name: Build hyprpaper
        run: PACKAGE=hyprpaper $SCRIPT_DIR/build-package

      - name: Build hyprsunset
        run: PACKAGE=hyprsunset $SCRIPT_DIR/build-package

      - name: Build hyprland
        run: PACKAGE=hyprland $SCRIPT_DIR/build-package

      - name: Build hyprland-qt-support
        run: PACKAGE=hyprland-qt-support $SCRIPT_DIR/build-package

      - name: Build hyprpolkitagent
        run: PACKAGE=hyprpolkitagent $SCRIPT_DIR/build-package

      - name: Build hyprsysteminfo
        run: PACKAGE=hyprsysteminfo $SCRIPT_DIR/build-package

      - name: Build hyprland-qtutils
        run: PACKAGE=hyprland-qtutils $SCRIPT_DIR/build-package

      - name: Export XBPS_TARGET_ARCH
        run: echo "XBPS_TARGET_ARCH=${{ env.TARGET_ARCH }}" >> "$GITHUB_ENV"

      - name: Copy relevant packages to new directory for indexing
        run: sudo -Eu builder $SCRIPT_DIR/index-packages

      - name: Retrieve private key
        run: cd /work && sudo -Eu builder $SCRIPT_DIR/retrieve-private-key

      - name: Sign package repository
        run: sudo -Eu builder $SCRIPT_DIR/sign-packages

      - name: Push new packages to binary repository
        run: cd /work/$REPO_NAME && sudo -Eu builder $SCRIPT_DIR/push-repository