diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9c28683..7b7a7d1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -27,6 +27,7 @@ execute_process(COMMAND ./scripts/generateVersion.sh
                 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
 
 find_package(PkgConfig REQUIRED)
+find_package(fmt REQUIRED)
 
 # Try to find canihavesomecoffee's udis86 using pkgconfig vmd/udis86 does not
 # provide a .pc file and won't be detected this way
@@ -227,6 +228,8 @@ else()
   target_link_libraries(Hyprland PkgConfig::xdeps)
 endif()
 
+set(NO_SYSTEMD ON)
+
 if(NO_SYSTEMD)
   message(STATUS "SYSTEMD support is disabled...")
 else()
@@ -303,6 +306,7 @@ function(protocolWayland)
 endfunction()
 
 target_link_libraries(Hyprland OpenGL::EGL OpenGL::GL Threads::Threads)
+target_link_libraries(Hyprland fmt::fmt)
 
 pkg_check_modules(hyprland_protocols_dep hyprland-protocols>=0.6.0)
 if(hyprland_protocols_dep_FOUND)
diff --git a/hyprctl/CMakeLists.txt b/hyprctl/CMakeLists.txt
index db5ef61..83555f2 100644
--- a/hyprctl/CMakeLists.txt
+++ b/hyprctl/CMakeLists.txt
@@ -9,7 +9,7 @@ pkg_check_modules(hyprctl_deps REQUIRED IMPORTED_TARGET hyprutils>=0.2.4 re2)
 
 add_executable(hyprctl "main.cpp")
 
-target_link_libraries(hyprctl PUBLIC PkgConfig::hyprctl_deps)
+target_link_libraries(hyprctl PUBLIC PkgConfig::hyprctl_deps fmt::fmt)
 
 # binary
 install(TARGETS hyprctl)
diff --git a/hyprctl/main.cpp b/hyprctl/main.cpp
index 16d6622..e5dfd89 100644
--- a/hyprctl/main.cpp
+++ b/hyprctl/main.cpp
@@ -19,7 +19,7 @@
 
 #include <iostream>
 #include <string>
-#include <print>
+#include <fmt/core.h>
 #include <fstream>
 #include <string>
 #include <vector>
@@ -49,7 +49,7 @@ void log(const std::string& str) {
     if (quiet)
         return;
 
-    std::println("{}", str);
+    fmt::print("{}", str);
 }
 
 static int getUID() {
@@ -117,7 +117,7 @@ std::vector<SInstanceData> instances() {
 static volatile bool sigintReceived = false;
 void                 intHandler(int sig) {
     sigintReceived = true;
-    std::println("[hyprctl] SIGINT received, closing connection");
+    fmt::print("[hyprctl] SIGINT received, closing connection");
 }
 
 int rollingRead(const int socket) {
@@ -127,12 +127,12 @@ int rollingRead(const int socket) {
     constexpr size_t              BUFFER_SIZE = 8192;
     std::array<char, BUFFER_SIZE> buffer      = {0};
     long                          sizeWritten = 0;
-    std::println("[hyprctl] reading from socket following up log:");
+    fmt::print("[hyprctl] reading from socket following up log:");
     while (!sigintReceived) {
         sizeWritten = read(socket, buffer.data(), BUFFER_SIZE);
         if (sizeWritten < 0 && errno != EAGAIN) {
             if (errno != EINTR)
-                std::println("Couldn't read (5): {}: {}", strerror(errno), errno);
+                fmt::print("Couldn't read (5): {}: {}", strerror(errno), errno);
             close(socket);
             return 5;
         }
@@ -141,7 +141,7 @@ int rollingRead(const int socket) {
             break;
 
         if (sizeWritten > 0) {
-            std::println("{}", std::string(buffer.data(), sizeWritten));
+            fmt::print("{}", std::string(buffer.data(), sizeWritten));
             buffer.fill('\0');
         }
 
@@ -336,7 +336,7 @@ int main(int argc, char** argv) {
     bool parseArgs = true;
 
     if (argc < 2) {
-        std::println("{}", USAGE);
+        fmt::print("{}", USAGE);
         return 1;
     }
 
@@ -373,7 +373,7 @@ int main(int argc, char** argv) {
                 ++i;
 
                 if (i >= ARGS.size()) {
-                    std::println("{}", USAGE);
+                    fmt::print("{}", USAGE);
                     return 1;
                 }
 
@@ -384,24 +384,24 @@ int main(int argc, char** argv) {
                 const std::string& cmd = ARGS[0];
 
                 if (cmd == "hyprpaper") {
-                    std::println("{}", HYPRPAPER_HELP);
+                    fmt::print("{}", HYPRPAPER_HELP);
                 } else if (cmd == "notify") {
-                    std::println("{}", NOTIFY_HELP);
+                    fmt::print("{}", NOTIFY_HELP);
                 } else if (cmd == "output") {
-                    std::println("{}", OUTPUT_HELP);
+                    fmt::print("{}", OUTPUT_HELP);
                 } else if (cmd == "plugin") {
-                    std::println("{}", PLUGIN_HELP);
+                    fmt::print("{}", PLUGIN_HELP);
                 } else if (cmd == "setprop") {
-                    std::println("{}", SETPROP_HELP);
+                    fmt::print("{}", SETPROP_HELP);
                 } else if (cmd == "switchxkblayout") {
-                    std::println("{}", SWITCHXKBLAYOUT_HELP);
+                    fmt::print("{}", SWITCHXKBLAYOUT_HELP);
                 } else {
-                    std::println("{}", USAGE);
+                    fmt::print("{}", USAGE);
                 }
 
                 return 1;
             } else {
-                std::println("{}", USAGE);
+                fmt::print("{}", USAGE);
                 return 1;
             }
 
@@ -412,7 +412,7 @@ int main(int argc, char** argv) {
     }
 
     if (fullRequest.empty()) {
-        std::println("{}", USAGE);
+        fmt::print("{}", USAGE);
         return 1;
     }
 
@@ -489,7 +489,7 @@ int main(int argc, char** argv) {
     else if (fullRequest.contains("/decorations"))
         exitStatus = request(fullRequest, 1);
     else if (fullRequest.contains("/--help"))
-        std::println("{}", USAGE);
+        fmt::print("{}", USAGE);
     else if (fullRequest.contains("/rollinglog") && needRoll)
         exitStatus = request(fullRequest, 0, true);
     else {
diff --git a/hyprpm/CMakeLists.txt b/hyprpm/CMakeLists.txt
index d744ac1..2aed378 100644
--- a/hyprpm/CMakeLists.txt
+++ b/hyprpm/CMakeLists.txt
@@ -27,7 +27,7 @@ endif()
 
 add_executable(hyprpm ${SRCFILES})
 
-target_link_libraries(hyprpm PUBLIC PkgConfig::hyprpm_deps glaze::glaze)
+target_link_libraries(hyprpm PUBLIC PkgConfig::hyprpm_deps glaze::glaze fmt::fmt)
 
 # binary
 install(TARGETS hyprpm)
diff --git a/hyprpm/src/core/DataState.cpp b/hyprpm/src/core/DataState.cpp
index 55f148a..76ca584 100644
--- a/hyprpm/src/core/DataState.cpp
+++ b/hyprpm/src/core/DataState.cpp
@@ -1,13 +1,13 @@
 #include "DataState.hpp"
 #include <toml++/toml.hpp>
-#include <print>
+#include <fmt/core.h>
 #include <fstream>
 #include "PluginManager.hpp"
 
 std::filesystem::path DataState::getDataStatePath() {
     const auto HOME = getenv("HOME");
     if (!HOME) {
-        std::println(stderr, "DataState: no $HOME");
+        fmt::print(stderr, "DataState: no $HOME");
         throw std::runtime_error("no $HOME");
         return "";
     }
diff --git a/hyprpm/src/core/PluginManager.cpp b/hyprpm/src/core/PluginManager.cpp
index 80d0a40..cf3408d 100644
--- a/hyprpm/src/core/PluginManager.cpp
+++ b/hyprpm/src/core/PluginManager.cpp
@@ -8,7 +8,7 @@
 #include <cstdio>
 #include <iostream>
 #include <filesystem>
-#include <print>
+#include <fmt/core.h>
 #include <fstream>
 #include <algorithm>
 #include <format>
@@ -68,10 +68,10 @@ SHyprlandVersion CPluginManager::getHyprlandVersion(bool running) {
 
     const auto HLVERCALL = running ? execAndGet("hyprctl version") : execAndGet("Hyprland --version");
     if (m_bVerbose)
-        std::println("{}", verboseString("{} version returned: {}", running ? "running" : "installed", HLVERCALL));
+        fmt::print("{}", verboseString("{} version returned: {}", running ? "running" : "installed", HLVERCALL));
 
     if (!HLVERCALL.contains("Tag:")) {
-        std::println(stderr, "\n{}", failureString("You don't seem to be running Hyprland."));
+        fmt::print(stderr, "\n{}", failureString("You don't seem to be running Hyprland."));
         return SHyprlandVersion{};
     }
 
@@ -97,7 +97,7 @@ SHyprlandVersion CPluginManager::getHyprlandVersion(bool running) {
     } catch (...) { ; }
 
     if (m_bVerbose)
-        std::println("{}", verboseString("parsed commit {} at branch {} on {}, commits {}", hlcommit, hlbranch, hldate, commits));
+        fmt::print("{}", verboseString("parsed commit {} at branch {} on {}, commits {}", hlcommit, hlbranch, hldate, commits));
 
     auto ver = SHyprlandVersion{hlbranch, hlcommit, hldate, commits};
 
@@ -129,19 +129,19 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     const auto HLVER = getHyprlandVersion();
 
     if (!hasDeps()) {
-        std::println(stderr, "\n{}", failureString("Could not clone the plugin repository. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio, pkg-config"));
+        fmt::print(stderr, "\n{}", failureString("Could not clone the plugin repository. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio, pkg-config"));
         return false;
     }
 
     if (DataState::pluginRepoExists(url)) {
-        std::println(stderr, "\n{}", failureString("Could not clone the plugin repository. Repository already installed."));
+        fmt::print(stderr, "\n{}", failureString("Could not clone the plugin repository. Repository already installed."));
         return false;
     }
 
     auto GLOBALSTATE = DataState::getGlobalState();
     if (!GLOBALSTATE.dontWarnInstall) {
-        std::println("{}!{} Disclaimer: {}", Colors::YELLOW, Colors::RED, Colors::RESET);
-        std::println("plugins, especially not official, have no guarantee of stability, availablity or security.\n"
+        fmt::print("{}!{} Disclaimer: {}", Colors::YELLOW, Colors::RED, Colors::RESET);
+        fmt::print("plugins, especially not official, have no guarantee of stability, availablity or security.\n"
                      "Run them at your own risk.\n"
                      "This message will not appear again.");
         GLOBALSTATE.dontWarnInstall = true;
@@ -157,7 +157,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     std::getline(std::cin, input);
 
     if (input.size() > 0 && input[0] != 'Y' && input[0] != 'y') {
-        std::println(stderr, "Aborting.");
+        fmt::print(stderr, "Aborting.");
         return false;
     }
 
@@ -172,7 +172,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
         std::filesystem::create_directory(getTempRoot());
         std::filesystem::permissions(getTempRoot(), std::filesystem::perms::owner_all, std::filesystem::perm_options::replace);
     } else if (!std::filesystem::is_directory(getTempRoot())) {
-        std::println(stderr, "\n{}", failureString("Could not prepare working dir for hyprpm"));
+        fmt::print(stderr, "\n{}", failureString("Could not prepare working dir for hyprpm"));
         return false;
     }
 
@@ -181,7 +181,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     m_szWorkingPluginDirectory = getTempRoot() + USERNAME;
 
     if (!createSafeDirectory(m_szWorkingPluginDirectory)) {
-        std::println(stderr, "\n{}", failureString("Could not prepare working dir for repo"));
+        fmt::print(stderr, "\n{}", failureString("Could not prepare working dir for repo"));
         return false;
     }
 
@@ -190,19 +190,19 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     std::string ret = execAndGet(std::format("cd {} && git clone --recursive {} {}", getTempRoot(), url, USERNAME));
 
     if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/.git")) {
-        std::println(stderr, "\n{}", failureString("Could not clone the plugin repository. shell returned:\n{}", ret));
+        fmt::print(stderr, "\n{}", failureString("Could not clone the plugin repository. shell returned:\n{}", ret));
         return false;
     }
 
     if (!rev.empty()) {
         std::string ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " reset --hard --recurse-submodules " + rev);
         if (ret.compare(0, 6, "fatal:") == 0) {
-            std::println(stderr, "\n{}", failureString("Could not check out revision {}. shell returned:\n{}", rev, ret));
+            fmt::print(stderr, "\n{}", failureString("Could not check out revision {}. shell returned:\n{}", rev, ret));
             return false;
         }
         ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " submodule update --init");
         if (m_bVerbose)
-            std::println("{}", verboseString("git submodule update --init returned: {}", ret));
+            fmt::print("{}", verboseString("git submodule update --init returned: {}", ret));
     }
 
     progress.m_iSteps = 1;
@@ -221,12 +221,12 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     }
 
     if (!pManifest) {
-        std::println(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
+        fmt::print(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
         return false;
     }
 
     if (!pManifest->m_bGood) {
-        std::println(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
+        fmt::print(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
         return false;
     }
 
@@ -260,7 +260,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
 
             ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " submodule update --init");
             if (m_bVerbose)
-                std::println("{}", verboseString("git submodule update --init returned: {}", ret));
+                fmt::print("{}", verboseString("git submodule update --init returned: {}", ret));
 
             break;
         }
@@ -272,7 +272,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     const auto HEADERSSTATUS = headersValid();
 
     if (HEADERSSTATUS != HEADERS_OK) {
-        std::println("\n{}", headerError(HEADERSSTATUS));
+        fmt::print("\n{}", headerError(HEADERSSTATUS));
         return false;
     }
 
@@ -298,7 +298,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
         }
 
         if (m_bVerbose)
-            std::println("{}", verboseString("shell returned: {}", out));
+            fmt::print("{}", verboseString("shell returned: {}", out));
 
         if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/" + p.output)) {
             progress.printMessageAbove(failureString("Plugin {} failed to build.\n"
@@ -339,7 +339,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     progress.m_szCurrentMessage = "Done!";
     progress.print();
 
-    std::print("\n");
+    fmt::print("\n");
 
     // remove build files
     std::filesystem::remove_all(m_szWorkingPluginDirectory);
@@ -349,7 +349,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
 
 bool CPluginManager::removePluginRepo(const std::string& urlOrName) {
     if (!DataState::pluginRepoExists(urlOrName)) {
-        std::println(stderr, "\n{}", failureString("Could not remove the repository. Repository is not installed."));
+        fmt::print(stderr, "\n{}", failureString("Could not remove the repository. Repository is not installed."));
         return false;
     }
 
@@ -360,7 +360,7 @@ bool CPluginManager::removePluginRepo(const std::string& urlOrName) {
     std::getline(std::cin, input);
 
     if (input.size() > 0 && input[0] != 'Y' && input[0] != 'y') {
-        std::println("Aborting.");
+        fmt::print("Aborting.");
         return false;
     }
 
@@ -435,7 +435,7 @@ bool CPluginManager::updateHeaders(bool force) {
     const auto HLVER = getHyprlandVersion(false);
 
     if (!hasDeps()) {
-        std::println("\n{}", failureString("Could not update. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio, pkg-config"));
+        fmt::print("\n{}", failureString("Could not update. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio, pkg-config"));
         return false;
     }
 
@@ -445,7 +445,7 @@ bool CPluginManager::updateHeaders(bool force) {
     }
 
     if (!force && headersValid() == HEADERS_OK) {
-        std::println("\n{}", successString("Headers up to date."));
+        fmt::print("\n{}", successString("Headers up to date."));
         return true;
     }
 
@@ -459,7 +459,7 @@ bool CPluginManager::updateHeaders(bool force) {
     const auto        WORKINGDIR = getTempRoot() + "hyprland-" + USERNAME;
 
     if (!createSafeDirectory(WORKINGDIR)) {
-        std::println("\n{}", failureString("Could not prepare working dir for hl"));
+        fmt::print("\n{}", failureString("Could not prepare working dir for hl"));
         return false;
     }
 
@@ -483,7 +483,7 @@ bool CPluginManager::updateHeaders(bool force) {
     }
 
     if (!std::filesystem::exists(WORKINGDIR + "/.git")) {
-        std::println(stderr, "\n{}", failureString("Could not clone the Hyprland repository. shell returned:\n{}", ret));
+        fmt::print(stderr, "\n{}", failureString("Could not clone the Hyprland repository. shell returned:\n{}", ret));
         return false;
     }
 
@@ -498,7 +498,7 @@ bool CPluginManager::updateHeaders(bool force) {
     ret = execAndGet("cd " + WORKINGDIR + " && git checkout " + HLVER.hash + " 2>&1");
 
     if (ret.contains("fatal: unable to read tree")) {
-        std::println(stderr, "\n{}",
+        fmt::print(stderr, "\n{}",
                      failureString("Could not checkout the running Hyprland commit. If you are on -git, try updating.\n"
                                    "You can also try re-running hyprpm update with --no-shallow."));
         return false;
@@ -534,7 +534,7 @@ bool CPluginManager::updateHeaders(bool force) {
         missing             = missing.substr(0, missing.find("-- Configuring incomplete"));
         missing             = missing.substr(0, missing.find_last_of('\n'));
 
-        std::println(stderr, "\n{}",
+        fmt::print(stderr, "\n{}",
                      failureString("Could not configure the hyprland source, cmake complained:\n{}\n\n"
                                    "This likely means that you are missing the above dependencies or they are out of date.",
                                    missing));
@@ -554,7 +554,7 @@ bool CPluginManager::updateHeaders(bool force) {
     ret = execAndGet(cmd);
 
     if (m_bVerbose)
-        std::println("{}", verboseString("installer returned: {}", ret));
+        fmt::print("{}", verboseString("installer returned: {}", ret));
 
     // remove build files
     std::filesystem::remove_all(WORKINGDIR);
@@ -566,14 +566,14 @@ bool CPluginManager::updateHeaders(bool force) {
         progress.m_szCurrentMessage = "Done!";
         progress.print();
 
-        std::print("\n");
+        fmt::print("\n");
     } else {
         progress.printMessageAbove(failureString("failed to install headers with error code {} ({})", (int)HEADERSVALID, headerErrorShort(HEADERSVALID)));
         progress.m_iSteps           = 5;
         progress.m_szCurrentMessage = "Failed";
         progress.print();
 
-        std::print(stderr, "\n\n{}", headerError(HEADERSVALID));
+        fmt::print(stderr, "\n\n{}", headerError(HEADERSVALID));
 
         return false;
     }
@@ -583,14 +583,14 @@ bool CPluginManager::updateHeaders(bool force) {
 
 bool CPluginManager::updatePlugins(bool forceUpdateAll) {
     if (headersValid() != HEADERS_OK) {
-        std::println("{}", failureString("headers are not up-to-date, please run hyprpm update."));
+        fmt::print("{}", failureString("headers are not up-to-date, please run hyprpm update."));
         return false;
     }
 
     const auto REPOS = DataState::getAllRepositories();
 
     if (REPOS.size() < 1) {
-        std::println("{}", failureString("No repos to update."));
+        fmt::print("{}", failureString("No repos to update."));
         return true;
     }
 
@@ -621,7 +621,7 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
         std::string ret = execAndGet(std::format("cd {} && git clone --recursive {} {}", getTempRoot(), repo.url, USERNAME));
 
         if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/.git")) {
-            std::println("{}", failureString("could not clone repo: shell returned: {}", ret));
+            fmt::print("{}", failureString("could not clone repo: shell returned: {}", ret));
             return false;
         }
 
@@ -630,7 +630,7 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
 
             std::string ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " reset --hard --recurse-submodules " + repo.rev);
             if (ret.compare(0, 6, "fatal:") == 0) {
-                std::println(stderr, "\n{}", failureString("could not check out revision {}: shell returned:\n{}", repo.rev, ret));
+                fmt::print(stderr, "\n{}", failureString("could not check out revision {}: shell returned:\n{}", repo.rev, ret));
 
                 return false;
             }
@@ -671,12 +671,12 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
         }
 
         if (!pManifest) {
-            std::println(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
+            fmt::print(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
             continue;
         }
 
         if (!pManifest->m_bGood) {
-            std::println(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
+            fmt::print(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
             continue;
         }
 
@@ -712,10 +712,10 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
             }
 
             if (m_bVerbose)
-                std::println("{}", verboseString("shell returned: {}", out));
+                fmt::print("{}", verboseString("shell returned: {}", out));
 
             if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/" + p.output)) {
-                std::println(stderr,
+                fmt::print(stderr,
                              "\n{}\n"
                              "  This likely means that the plugin is either outdated, not yet available for your version, or broken.\n"
                              "If you are on -git, update first.\n"
@@ -761,7 +761,7 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
     progress.m_szCurrentMessage = "Done!";
     progress.print();
 
-    std::print("\n");
+    fmt::print("\n");
 
     return true;
 }
@@ -769,47 +769,47 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
 bool CPluginManager::enablePlugin(const std::string& name) {
     bool ret = DataState::setPluginEnabled(name, true);
     if (ret)
-        std::println("{}", successString("Enabled {}", name));
+        fmt::print("{}", successString("Enabled {}", name));
     return ret;
 }
 
 bool CPluginManager::disablePlugin(const std::string& name) {
     bool ret = DataState::setPluginEnabled(name, false);
     if (ret)
-        std::println("{}", successString("Disabled {}", name));
+        fmt::print("{}", successString("Disabled {}", name));
     return ret;
 }
 
 ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState(bool forceReload) {
     if (headersValid() != HEADERS_OK) {
-        std::println(stderr, "\n{}", failureString("headers are not up-to-date, please run hyprpm update."));
+        fmt::print(stderr, "\n{}", failureString("headers are not up-to-date, please run hyprpm update."));
         return LOADSTATE_HEADERS_OUTDATED;
     }
 
     const auto HOME = getenv("HOME");
     const auto HIS  = getenv("HYPRLAND_INSTANCE_SIGNATURE");
     if (!HOME || !HIS) {
-        std::println(stderr, "PluginManager: no $HOME or $HYPRLAND_INSTANCE_SIGNATURE");
+        fmt::print(stderr, "PluginManager: no $HOME or $HYPRLAND_INSTANCE_SIGNATURE");
         return LOADSTATE_FAIL;
     }
     const auto HYPRPMPATH = DataState::getDataStatePath();
 
     const auto json = glz::read_json<glz::json_t::array_t>(execAndGet("hyprctl plugins list -j"));
     if (!json) {
-        std::println(stderr, "PluginManager: couldn't parse hyprctl output");
+        fmt::print(stderr, "PluginManager: couldn't parse hyprctl output");
         return LOADSTATE_FAIL;
     }
 
     std::vector<std::string> loadedPlugins;
     for (const auto& plugin : json.value()) {
         if (!plugin.is_object() || !plugin.contains("name")) {
-            std::println(stderr, "PluginManager: couldn't parse plugin object");
+            fmt::print(stderr, "PluginManager: couldn't parse plugin object");
             return LOADSTATE_FAIL;
         }
         loadedPlugins.emplace_back(plugin["name"].get<std::string>());
     }
 
-    std::println("{}", successString("Ensuring plugin load state"));
+    fmt::print("{}", successString("Ensuring plugin load state"));
 
     // get state
     const auto REPOS = DataState::getAllRepositories();
@@ -846,10 +846,10 @@ ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState(bool forceReload)
         if (forceReload || !enabled(p)) {
             // unload
             if (!loadUnloadPlugin(HYPRPMPATH / repoForName(p) / (p + ".so"), false)) {
-                std::println("{}", infoString("{} will be unloaded after restarting Hyprland", p));
+                fmt::print("{}", infoString("{} will be unloaded after restarting Hyprland", p));
                 hyprlandVersionMismatch = true;
             } else
-                std::println("{}", successString("Unloaded {}", p));
+                fmt::print("{}", successString("Unloaded {}", p));
         }
     }
 
@@ -863,14 +863,14 @@ ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState(bool forceReload)
                 continue;
 
             if (!loadUnloadPlugin(HYPRPMPATH / repoForName(p.name) / p.filename, true)) {
-                std::println("{}", infoString("{} will be loaded after restarting Hyprland", p.name));
+                fmt::print("{}", infoString("{} will be loaded after restarting Hyprland", p.name));
                 hyprlandVersionMismatch = true;
             } else
-                std::println("{}", successString("Loaded {}", p.name));
+                fmt::print("{}", successString("Loaded {}", p.name));
         }
     }
 
-    std::println("{}", successString("Plugin load state ensured"));
+    fmt::print("{}", successString("Plugin load state ensured"));
 
     return hyprlandVersionMismatch ? LOADSTATE_HYPRLAND_UPDATED : LOADSTATE_OK;
 }
@@ -880,7 +880,7 @@ bool CPluginManager::loadUnloadPlugin(const std::string& path, bool load) {
     auto HLVER = getHyprlandVersion(true);
 
     if (state.headersHashCompiled != HLVER.hash) {
-        std::println("{}", infoString("Running Hyprland version differs from plugin state, please restart Hyprland."));
+        fmt::print("{}", infoString("Running Hyprland version differs from plugin state, please restart Hyprland."));
         return false;
     }
 
@@ -896,17 +896,17 @@ void CPluginManager::listAllPlugins() {
     const auto REPOS = DataState::getAllRepositories();
 
     for (auto const& r : REPOS) {
-        std::println("{}", infoString("Repository {}:", r.name));
+        fmt::print("{}", infoString("Repository {}:", r.name));
 
         for (auto const& p : r.plugins) {
-            std::println("  │ Plugin {}", p.name);
+            fmt::print("  │ Plugin {}", p.name);
 
             if (!p.failed)
-                std::println("  └─ enabled: {}", (p.enabled ? std::string{Colors::GREEN} + "true" : std::string{Colors::RED} + "false"));
+                fmt::print("  └─ enabled: {}", (p.enabled ? std::string{Colors::GREEN} + "true" : std::string{Colors::RED} + "false"));
             else
-                std::println("  └─ enabled: {}Plugin failed to build", Colors::RED);
+                fmt::print("  └─ enabled: {}Plugin failed to build", Colors::RED);
 
-            std::println("{}", Colors::RESET);
+            fmt::print("{}", Colors::RESET);
         }
     }
 }
diff --git a/hyprpm/src/main.cpp b/hyprpm/src/main.cpp
index 887bb43..8316626 100644
--- a/hyprpm/src/main.cpp
+++ b/hyprpm/src/main.cpp
@@ -6,7 +6,7 @@
 #include <cstdio>
 #include <vector>
 #include <string>
-#include <print>
+#include <fmt/core.h>
 #include <chrono>
 #include <thread>
 
@@ -39,7 +39,7 @@ int                        main(int argc, char** argv, char** envp) {
     }
 
     if (ARGS.size() < 2) {
-        std::println(stderr, "{}", HELP);
+        fmt::print(stderr, "{}", HELP);
         return 1;
     }
 
@@ -49,7 +49,7 @@ int                        main(int argc, char** argv, char** envp) {
     for (int i = 1; i < argc; ++i) {
         if (ARGS[i].starts_with("-")) {
             if (ARGS[i] == "--help" || ARGS[i] == "-h") {
-                std::println("{}", HELP);
+                fmt::print("{}", HELP);
                 return 0;
             } else if (ARGS[i] == "--notify" || ARGS[i] == "-n") {
                 notify = true;
@@ -61,9 +61,9 @@ int                        main(int argc, char** argv, char** envp) {
                 noShallow = true;
             } else if (ARGS[i] == "--force" || ARGS[i] == "-f") {
                 force = true;
-                std::println("{}", statusString("!", Colors::RED, "Using --force, I hope you know what you are doing."));
+                fmt::print("{}", statusString("!", Colors::RED, "Using --force, I hope you know what you are doing."));
             } else {
-                std::println(stderr, "Unrecognized option {}", ARGS[i]);
+                fmt::print(stderr, "Unrecognized option {}", ARGS[i]);
                 return 1;
             }
         } else {
@@ -72,7 +72,7 @@ int                        main(int argc, char** argv, char** envp) {
     }
 
     if (command.empty()) {
-        std::println(stderr, "{}", HELP);
+        fmt::print(stderr, "{}", HELP);
         return 1;
     }
 
@@ -82,7 +82,7 @@ int                        main(int argc, char** argv, char** envp) {
 
     if (command[0] == "add") {
         if (command.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for add."));
+            fmt::print(stderr, "{}", failureString("Not enough args for add."));
             return 1;
         }
 
@@ -94,7 +94,7 @@ int                        main(int argc, char** argv, char** envp) {
         return g_pPluginManager->addNewPluginRepo(command[1], rev) ? 0 : 1;
     } else if (command[0] == "remove") {
         if (ARGS.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for remove."));
+            fmt::print(stderr, "{}", failureString("Not enough args for remove."));
             return 1;
         }
 
@@ -123,12 +123,12 @@ int                        main(int argc, char** argv, char** envp) {
             g_pPluginManager->notify(ICON_ERROR, 0, 10000, "[hyprpm] Couldn't update headers");
     } else if (command[0] == "enable") {
         if (ARGS.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for enable."));
+            fmt::print(stderr, "{}", failureString("Not enough args for enable."));
             return 1;
         }
 
         if (!g_pPluginManager->enablePlugin(command[1])) {
-            std::println(stderr, "{}", failureString("Couldn't enable plugin (missing?)"));
+            fmt::print(stderr, "{}", failureString("Couldn't enable plugin (missing?)"));
             return 1;
         }
 
@@ -141,12 +141,12 @@ int                        main(int argc, char** argv, char** envp) {
             return 1;
     } else if (command[0] == "disable") {
         if (command.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for disable."));
+            fmt::print(stderr, "{}", failureString("Not enough args for disable."));
             return 1;
         }
 
         if (!g_pPluginManager->disablePlugin(command[1])) {
-            std::println(stderr, "{}", failureString("Couldn't disable plugin (missing?)"));
+            fmt::print(stderr, "{}", failureString("Couldn't disable plugin (missing?)"));
             return 1;
         }
 
@@ -172,7 +172,7 @@ int                        main(int argc, char** argv, char** envp) {
     } else if (command[0] == "list") {
         g_pPluginManager->listAllPlugins();
     } else {
-        std::println(stderr, "{}", HELP);
+        fmt::print(stderr, "{}", HELP);
         return 1;
     }
 
diff --git a/hyprpm/src/progress/CProgressBar.cpp b/hyprpm/src/progress/CProgressBar.cpp
index 9f2df08..b344570 100644
--- a/hyprpm/src/progress/CProgressBar.cpp
+++ b/hyprpm/src/progress/CProgressBar.cpp
@@ -5,7 +5,7 @@
 #include <cmath>
 #include <format>
 
-#include <print>
+#include <fmt/core.h>
 #include <stdio.h>
 #include <unistd.h>
 
@@ -21,7 +21,7 @@ void CProgressBar::printMessageAbove(const std::string& msg) {
         spaces += ' ';
     }
 
-    std::println("\r{}\r{}", spaces, msg);
+    fmt::print("\r{}\r{}", spaces, msg);
     print();
 }
 
@@ -30,7 +30,7 @@ void CProgressBar::print() {
     ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);
 
     if (m_bFirstPrint)
-        std::print("\n");
+        fmt::print("\n");
     m_bFirstPrint = false;
 
     std::string spaces;
@@ -39,7 +39,7 @@ void CProgressBar::print() {
         spaces += ' ';
     }
 
-    std::print("\r{}\r", spaces);
+    fmt::print("\r{}\r", spaces);
 
     std::string message = "";
 
@@ -76,7 +76,7 @@ void CProgressBar::print() {
         message += "  " + std::format("{} / {}", m_iSteps, m_iMaxSteps) + " ";
 
     // draw message
-    std::print("{} {}", message, m_szCurrentMessage);
+    fmt::print("{} {}", message, m_szCurrentMessage);
 
     std::fflush(stdout);
 }
diff --git a/src/Compositor.cpp b/src/Compositor.cpp
index 3421c31..1cb962b 100644
--- a/src/Compositor.cpp
+++ b/src/Compositor.cpp
@@ -18,11 +18,11 @@
 #include <bit>
 #include <ctime>
 #include <random>
-#include <print>
+#include <fmt/core.h>
 #include <cstring>
 #include <filesystem>
 #include <ranges>
-#include <print>
+#include <fmt/core.h>
 #include <unordered_set>
 #include "debug/HyprCtl.hpp"
 #include "debug/CrashReporter.hpp"
@@ -170,12 +170,12 @@ CCompositor::CCompositor(bool onlyConfig) : m_bOnlyConfigVerification(onlyConfig
     m_szHyprTempDataRoot = std::string{getenv("XDG_RUNTIME_DIR")} + "/hypr";
 
     if (m_szHyprTempDataRoot.starts_with("/hypr")) {
-        std::println("Bailing out, $XDG_RUNTIME_DIR is invalid");
+        fmt::print("Bailing out, $XDG_RUNTIME_DIR is invalid");
         throw std::runtime_error("CCompositor() failed");
     }
 
     if (!m_szHyprTempDataRoot.starts_with("/run/user"))
-        std::println("[!!WARNING!!] XDG_RUNTIME_DIR looks non-standard. Proceeding anyways...");
+        fmt::print("[!!WARNING!!] XDG_RUNTIME_DIR looks non-standard. Proceeding anyways...");
 
     std::random_device              dev;
     std::mt19937                    engine(dev());
@@ -188,19 +188,19 @@ CCompositor::CCompositor(bool onlyConfig) : m_bOnlyConfigVerification(onlyConfig
     if (!std::filesystem::exists(m_szHyprTempDataRoot))
         mkdir(m_szHyprTempDataRoot.c_str(), S_IRWXU);
     else if (!std::filesystem::is_directory(m_szHyprTempDataRoot)) {
-        std::println("Bailing out, {} is not a directory", m_szHyprTempDataRoot);
+        fmt::print("Bailing out, {} is not a directory", m_szHyprTempDataRoot);
         throw std::runtime_error("CCompositor() failed");
     }
 
     m_szInstancePath = m_szHyprTempDataRoot + "/" + m_szInstanceSignature;
 
     if (std::filesystem::exists(m_szInstancePath)) {
-        std::println("Bailing out, {} exists??", m_szInstancePath);
+        fmt::print("Bailing out, {} exists??", m_szInstancePath);
         throw std::runtime_error("CCompositor() failed");
     }
 
     if (mkdir(m_szInstancePath.c_str(), S_IRWXU) < 0) {
-        std::println("Bailing out, couldn't create {}", m_szInstancePath);
+        fmt::print("Bailing out, couldn't create {}", m_szInstancePath);
         throw std::runtime_error("CCompositor() failed");
     }
 
@@ -272,7 +272,7 @@ void CCompositor::initServer(std::string socketName, int socketFd) {
         g_pAnimationManager = makeUnique<CHyprAnimationManager>();
         g_pConfigManager    = makeUnique<CConfigManager>();
 
-        std::println("\n\n======== Config parsing result:\n\n{}", g_pConfigManager->verify());
+        fmt::print("\n\n======== Config parsing result:\n\n{}", g_pConfigManager->verify());
         return;
     }
 
diff --git a/src/debug/Log.cpp b/src/debug/Log.cpp
index 9cf8634..0fad7ba 100644
--- a/src/debug/Log.cpp
+++ b/src/debug/Log.cpp
@@ -3,13 +3,27 @@
 #include "RollingLogFollow.hpp"
 
 #include <fstream>
-#include <print>
+#include <fmt/core.h>
 #include <fcntl.h>
 
 void Debug::init(const std::string& IS) {
     logFile = IS + (ISDEBUG ? "/hyprlandd.log" : "/hyprland.log");
     logOfs.open(logFile, std::ios::out | std::ios::app);
-    auto handle = logOfs.native_handle();
+
+    if (!logOfs.is_open()) {
+        fmt::print(stderr, "Failed to open log file: {}\n", logFile);
+        return;
+    }
+
+    int handle = fileno(stdout); // Default to stdout if extraction fails
+    if (logOfs) {
+        // Extract file descriptor from fstream
+        int fd = open(logFile.c_str(), O_WRONLY | O_APPEND);
+        if (fd != -1) {
+            handle = fd;
+        }
+    }
+
     fcntl(handle, F_SETFD, FD_CLOEXEC);
 }
 
@@ -70,5 +84,5 @@ void Debug::log(eLogLevel level, std::string str) {
 
     // log it to the stdout too.
     if (!disableStdout)
-        std::println("{}", ((coloredLogs && !**coloredLogs) ? str : coloredStr));
+        fmt::print("{}", ((coloredLogs && !**coloredLogs) ? str : coloredStr));
 }
diff --git a/src/macros.hpp b/src/macros.hpp
index 0a3be8b..7b2635c 100644
--- a/src/macros.hpp
+++ b/src/macros.hpp
@@ -2,7 +2,7 @@
 
 #include <cmath>
 #include <csignal>
-#include <print>
+#include <fmt/core.h>
 #include <utility>
 
 #include "helpers/memory/Memory.hpp"
@@ -51,7 +51,7 @@
         Debug::log(CRIT, "\n==========================================================================================\nASSERTION FAILED! \n\n{}\n\nat: line {} in {}",            \
                    std::format(reason, ##__VA_ARGS__), __LINE__,                                                                                                                   \
                    ([]() constexpr -> std::string { return std::string(__FILE__).substr(std::string(__FILE__).find_last_of('/') + 1); })());                                       \
-        std::print("Assertion failed! See the log in /tmp/hypr/hyprland.log for more info.");                                                                                      \
+        fmt::print("Assertion failed! See the log in /tmp/hypr/hyprland.log for more info.");                                                                                      \
         raise(SIGABRT);                                                                                                                                                            \
     }
 
diff --git a/src/main.cpp b/src/main.cpp
index 464ed97..81076c0 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -7,7 +7,7 @@
 
 #include <cstdio>
 #include <hyprutils/string/String.hpp>
-#include <print>
+#include <fmt/core.h>
 using namespace Hyprutils::String;
 
 #include <fcntl.h>
@@ -19,8 +19,8 @@ using namespace Hyprutils::String;
 #include <filesystem>
 
 static void help() {
-    std::println("usage: Hyprland [arg [...]].\n");
-    std::println(R"(Arguments:
+    fmt::print("usage: Hyprland [arg [...]].\n");
+    fmt::print(R"(Arguments:
     --help              -h       - Show this message again
     --config FILE       -c FILE  - Specify config file to use
     --socket NAME                - Sets the Wayland socket name (for Wayland socket handover)
@@ -56,7 +56,7 @@ int main(int argc, char** argv) {
 
     for (auto it = args.begin(); it != args.end(); it++) {
         if (*it == "--i-am-really-stupid" && !ignoreSudo) {
-            std::println("[ WARNING ] Running Hyprland with superuser privileges might damage your system");
+            fmt::print("[ WARNING ] Running Hyprland with superuser privileges might damage your system");
 
             ignoreSudo = true;
         } else if (*it == "--socket") {
@@ -82,7 +82,7 @@ int main(int argc, char** argv) {
                 if (fcntl(socketFd, F_GETFD) == -1)
                     throw std::exception();
             } catch (...) {
-                std::println(stderr, "[ ERROR ] Invalid Wayland FD!");
+                fmt::print(stderr, "[ ERROR ] Invalid Wayland FD!");
                 help();
 
                 return 1;
@@ -104,7 +104,7 @@ int main(int argc, char** argv) {
                     throw std::exception();
                 }
             } catch (...) {
-                std::println(stderr, "[ ERROR ] Config file '{}' doesn't exist!", configPath);
+                fmt::print(stderr, "[ ERROR ] Config file '{}' doesn't exist!", configPath);
                 help();
 
                 return 1;
@@ -120,16 +120,16 @@ int main(int argc, char** argv) {
 
             return 0;
         } else if (*it == "-v" || *it == "--version") {
-            std::println("{}", versionRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
+            fmt::print("{}", versionRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
             return 0;
         } else if (*it == "--systeminfo") {
-            std::println("{}", systemInfoRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
+            fmt::print("{}", systemInfoRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
             return 0;
         } else if (*it == "--verify-config") {
             verifyConfig = true;
             continue;
         } else {
-            std::println(stderr, "[ ERROR ] Unknown option '{}' !", *it);
+            fmt::print(stderr, "[ ERROR ] Unknown option '{}' !", *it);
             help();
 
             return 1;
@@ -137,16 +137,16 @@ int main(int argc, char** argv) {
     }
 
     if (!ignoreSudo && NInit::isSudo()) {
-        std::println(stderr,
+        fmt::print(stderr,
                      "[ ERROR ] Hyprland was launched with superuser privileges, but the privileges check is not omitted.\n"
                      "          Hint: Use the --i-am-really-stupid flag to omit that check.");
 
         return 1;
     } else if (ignoreSudo && NInit::isSudo())
-        std::println("Superuser privileges check is omitted. I hope you know what you're doing.");
+        fmt::print("Superuser privileges check is omitted. I hope you know what you're doing.");
 
     if (socketName.empty() ^ (socketFd == -1)) {
-        std::println(stderr,
+        fmt::print(stderr,
                      "[ ERROR ] Hyprland was launched with only one of --socket and --wayland-fd.\n"
                      "          Hint: Pass both --socket and --wayland-fd to perform Wayland socket handover.");
 
@@ -154,7 +154,7 @@ int main(int argc, char** argv) {
     }
 
     if (!verifyConfig)
-        std::println("Welcome to Hyprland!");
+        fmt::print("Welcome to Hyprland!");
 
     // let's init the compositor.
     // it initializes basic Wayland stuff in the constructor.
@@ -162,7 +162,7 @@ int main(int argc, char** argv) {
         g_pCompositor                     = makeUnique<CCompositor>(verifyConfig);
         g_pCompositor->explicitConfigPath = configPath;
     } catch (const std::exception& e) {
-        std::println(stderr, "Hyprland threw in ctor: {}\nCannot continue.", e.what());
+        fmt::print(stderr, "Hyprland threw in ctor: {}\nCannot continue.", e.what());
         return 1;
     }
 
